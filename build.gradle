buildscript {
    ext {
        springBootVersion = '2.1.9.RELEASE'
        encoding = 'UTF-8'
        compatibility = JavaVersion.VERSION_11
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id "org.dddjava.jig-gradle-plugin" version "2019.7.4"
    id 'jacoco'
    id "org.sonarqube" version "2.7.1"
}

jigReports.dependsOn(clean, compileJava, processResources)
bootRun.mustRunAfter(clean)

sourceCompatibility = compatibility
targetCompatibility = compatibility

jacoco.toolVersion = '0.8.4'

// JavaクラスとSQLファイルの出力先ディレクトリを同じにし、コンパイルより前にSQLファイルを出力先ディレクトリにコピーする。
processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

tasks.withType(Test) { systemProperty "file.encoding", encoding }

// for Integration(E2E) test
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeClasspath.extendsFrom testRuntimeClasspath
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}
sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
task integrationTest(type: Test) {
    group 'verification'
    description 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}
integrationTest {
    useJUnitPlatform()
}
check.dependsOn integrationTest


repositories {
    jcenter()
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:' + springBootVersion)
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    def doma = 'org.seasar.doma:doma:2.24.0'
    implementation(doma)
    annotationProcessor(doma)
    implementation("org.seasar.doma.boot:doma-spring-boot-starter:1.1.1")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")

    implementation('org.jopendocument:jOpenDocument:1.3')

    implementation("org.flywaydb:flyway-core:5.2.4")  // 6以降にするには、spring-bootが2.2以上に上げられる様になってから

    runtimeOnly("com.h2database:h2")
    runtimeOnly('org.postgresql:postgresql:42.2.6')

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(group: 'junit')
    }

    testImplementation platform("org.junit:junit-bom:5.4.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeClasspath("org.junit.platform:junit-platform-launcher")
    testRuntimeClasspath("org.junit.jupiter:junit-jupiter-engine")

    integrationTestImplementation('com.codeborne:selenide:5.3.1')
}

test {
    useJUnitPlatform()
}
